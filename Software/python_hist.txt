 1/1: import board
 1/2: import digitalio
 1/3: import busio
 1/4:  print("Hello blinka!")
 1/5: pin = digitalio.DigitalInOut(board.D4)
 1/6: pin = busioi.I2C(board.SCL, board.SDA)
 1/7: import digitalio
 1/8: import busio
 1/9: pin = busioi.I2C(board.SCL, board.SDA)
1/10: pin = busio.I2C(board.SCL, board.SDA)
1/11: sudo cmod ugo+rw /dev/i2c-1
1/12: sudo chmod ugo+rw /dev/i2c-1
1/13: pin = busio.I2C(board.SCL, board.SDA)
1/14: i2c = busio.I2C(board.SCL, board.SDA)
1/15: spi = busio.SPI(board.SCLK, board.MOSI, board.MISO)
1/16: spi = busio.SPI(board.SCLK, board.MOSI, board.MISO)
1/17: pin = busio.I2C(board.SCL, board.SDA)
1/18: pin = digitalio.DigitalInOut(board.D4)
1/19: pin.value
 2/1: import board
 2/2: import digitalio
 2/3: import busio
 2/4: pin = digitalio.DigitalInOut(board.D4)
 2/5: spi = busio.SPI(board.SCLK, board.MOSI, board.MISO)
 2/6: pin = busio.I2C(board.SCL, board.SDA)
 3/1: import board
 3/2: import digitalio
 3/3: import busio
 3/4: pin = busio.I2C(board.SCL, board.SDA)
 3/5: spi = busio.SPI(board.SCLK, board.MOSI, board.MISO)
 3/6: pin = digitalio.DigitalInOut(board.D4)
 4/1: import board
 4/2: import busio
 4/3: import adafruit_bme280
 4/4: i2c = busio.I2C(board.SCL, board.SDA)
 4/5: bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)
 4/6: bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c, address=0x76)
 4/7: bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)
 4/8: bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c, address=0x76)
 5/1: import board
 5/2: import busio
 5/3: import adafruit_bme280
 5/4: import adafruit_bmp280
 5/5: i2c = busio.I2C(board.SCL, board.SDA)
 5/6: bme280 = adafruit_bmp280.Adafruit_BMP280_I2C(i2c, address=0x76)
 5/7: print("\nTemperature: %0.1f C" % bme280.temperature)
 5/8: print("\nTemperature: %0.1f C" % bme280.temperature)
 5/9: print("pRESSURE: %0.1f HpA" % bme280.pressure)
5/10: print("pRESSURE: %0.1f hPa" % bme280.pressure)
5/11: print("pRESSURE: %0.1f hPa" % bme280.pressure)
5/12: print("\nTemperature: %0.1f C" % bme280.temperature)
5/13: print("\nTemperature: %0.1f C" % bme280.temperature)
5/14: print("pRESSURE: %0.1f hPa" % bme280.pressure)
5/15: mcp4725A0T
 6/1: import board
 6/2: import busio
 6/3: import adafruit_mcp4725
 6/4: i2c = busio.I2C(board.SCL, board.SDA)
 6/5: dac = adafruit_mcp4725.MCP4725(i2c, address=0x60)
 6/6: dac.value = 300
 7/1: import board
 7/2: import busio
 7/3: import adafruit_ina219
 7/4: i2c = busio.I2C(board.SCL, board.SDA)
 7/5: sensor = adafruit_ina219.INA219(i2c, address=0x45)Ã 
 7/6: sensor = adafruit_ina219.INA219(i2c, address=0x45)
 7/7: sensor = adafruit_ina219.INA219(i2c, address=0x45)
 7/8: sensor = adafruit_ina219.INA219(i2c)
 7/9: sensor = adafruit_ina219.INA219(i2c, address=0x46)
7/10: sensor = adafruit_ina219.INA219(i2c, addr=0x46)
7/11: change rshunt
7/12: adafruit_ina219.const?
7/13: shunt
 8/1: from ina219 import INA219
 8/2: from ina219 import DeviceRangeError
 8/3: SHUNT_OHMS=0.02
 8/4: ina = INA219(SHUNT_OHMS)
 8/5: ina.configure()
 8/6: ina.configure?
 8/7: ina = INA219?
 8/8: ina = INA219(SHUN_OHMS,adress="0x45")
 8/9: ina = INA219(SHUNT_OHMS,adress="0x45")
8/10: INA219?
8/11: ina = INA219(SHUNT_OHMS,,"0x45")
8/12: ina = INA219(SHUNT_OHMS,10,"0x45")
8/13: ina = INA219(SHUNT_OHMS,10,"1")
8/14: ina.configure()
8/15: ina = INA219(SHUNT_OHMS,10,0x45)
8/16: ina = INA219(SHUNT_OHMS,10,address=0x45)
8/17: ina.configure()
8/18: ina.configure(ina.RANGE_16V)
8/19:
while True:
    print("Voltage : %.3f V" % ina.voltage())
    ina.sleep()
    time.sleep(60)
    ina.wake()
8/20: import time
8/21:
while True:
    print("Voltage : %.3f V" % ina.voltage())
    ina.sleep()
    time.sleep(60)
    ina.wake()
 9/1: import board
 9/2: from adafruit_onewire.bus import OneWireBus
 9/3: from adafruit_ds18x20 import DS18X20
 9/4: ow_bus = OneWireBus(board.D7)
10/1: import board
10/2: from adafruit_onewire.bus import OneWireBus
10/3: from adafruit_ds18x20 import DS18X20
10/4: ow_bus = OneWireBus(board.D7)
11/1: from pi1wire
11/2: from pi1wire import Pi1Wire
11/3:
for s in Pi1Wire().find_all_sensors():
    print('%s = %.2f' % (s.mac_adress, s.get_temperature()))
11/4: Pi1Wire().find_all_sensors()
11/5: ubuntu mate d18B20
12/1: import board
12/2: import busio
12/3: import adafruit_mcp4725
12/4: i2c = busio.I2C(board.SCL, board.SDA)
12/5: dac = adafruit_mcp4725.MCP4725(i2c, address=0x60)
12/6: dac.value = 0
12/7: dac.value = 30
12/8: dac.value = 3000
12/9: dac.value = 30000
12/10: dac.value = 65535
12/11: dac.value = 65534
12/12: dac.value = 61534
12/13: dac.value = 60534
12/14: dac.value = 50534
12/15: dac.value = 40534
12/16: dac.value = 30534
12/17: dac.value = 20534
12/18: dac.value = 30534
12/19: dac.value = 50534
12/20: dac.value = 30534
12/21: dac.value = 25534
12/22: dac.value = 26534
12/23: dac.value = 27534
12/24: dac.value = 28534
12/25: dac.value = 29534
12/26: dac.value = 30534
12/27: dac.value = 30000
12/28: dac.value = 30100
12/29: dac.value = 30150
12/30: dac.value = 30200
12/31: dac.value = 30300
12/32: dac.value = 30400
12/33: dac.value = 30300
12/34: dac2 = adafruit_mcp4725.MCP4725(i2c, address=0x61)
12/35: dac2.value = 30400
12/36: dac2.value = 30000
12/37: dac2.value = 0
12/38: from pi1wire import Pi1Wire
12/39:
for s in Pi1Wire().find_all_sensors():
    print('%s = %.2f' % (s.mac_adress, s.get_temperature()))
12/40: Pi1Wire().find_all_sensors()
12/41: Pi1Wire().find_all_sensors().mac_adress
12/42: Pi1Wire().find_all_sensors().get_temperature()
12/43: Pi1Wire().find_all_sensors()[1].get_temperature()
12/44: Pi1Wire().find_all_sensors()[10].get_temperature()
12/45: Pi1Wire().find_all_sensors()[0].get_temperature()
12/46: Pi1Wire().find_all_sensors()[0].get_temperature()
12/47: Pi1Wire().find_all_sensors()[0].get_temperature()
12/48: Pi1Wire().find_all_sensors()[0].get_temperature()
12/49: Pi1Wire().find_all_sensors()[0].get_temperature()
12/50: Pi1Wire().find_all_sensors()[0].get_temperature()
12/51: Pi1Wire().find_all_sensors()[0].get_temperature()
12/52: Pi1Wire().find_all_sensors()[0].get_temperature()
12/53: Pi1Wire().find_all_sensors()[0].get_temperature()
12/54: Pi1Wire().find_all_sensors()[0].get_temperature()
12/55: Pi1Wire().find_all_sensors()[0].get_temperature()
12/56: Pi1Wire().find_all_sensors()[1].get_temperature()
12/57: Pi1Wire().find_all_sensors()[1].get_temperature()
12/58: Pi1Wire().find_all_sensors()[1].get_temperature()
12/59: Pi1Wire().find_all_sensors()[1].get_temperature()
12/60: Pi1Wire().find_all_sensors()[1].get_temperature()
12/61: Pi1Wire().find_all_sensors()[1].get_temperature()
12/62: Pi1Wire().find_all_sensors()[1].get_temperature()
12/63: Pi1Wire().find_all_sensors()[1].get_temperature()
12/64: Pi1Wire().find_all_sensors()[0].get_temperature()
12/65: Pi1Wire().find_all_sensors()[0].get_temperature()
12/66: Pi1Wire().find_all_sensors()[0].get_temperature()
12/67: Pi1Wire().find_all_sensors()[0].get_temperature()
12/68: Pi1Wire().find_all_sensors()[0].get_temperature()
12/69: Pi1Wire().find_all_sensors()[0].get_temperature()
13/1: import board
13/2: import busio
13/3: import adafruit_ina219
13/4: i2c = busio.I2C(board.SCL, board.SDA)
13/5: sensor = adafruit_ina219.INA219(i2c, addr=0x44)
13/6: sensor.reset
13/7: sensor.reset
13/8: sensor.reset
13/9: sensor.reset()
13/10: sensor.reset?
13/11: sensor.reset
13/12: sensor.reset
13/13: sensor.bus_voltage()
13/14: sensor.bus_voltage
13/15: sensor.calibration
13/16: sensor.current
14/1: import time
14/2: import board
14/3: import pulseio
15/1: import time
15/2: import board
15/3: import pulseio
15/4: led = pulseio.PWMOut(board.D6, frequency=5000, duty_cicle=0)
15/5: led = pulseio.PWMOut(board.D6, frequency=5000, duty_cycle=0)
15/6: led = pulseio.PWMOut(board.D6, frequency=5000, duty_cycle=50)
15/7: led.duty_cycle(50)
15/8: led.duty_cycle = 50
15/9: led.duty_cycle = 500
15/10: led.duty_cycle = 5000
15/11: led.duty_cycle = 5000
15/12:
while true:
    for i in range(100):
        if i <50:
            led.duty_cycle = int(i*2*65535/100)
        else:
            led.duty_cycle = 65535 - int((i-50)*2*65535/100)
        time.sleep(1)
15/13:
while True:
    for i in range(100):
        if i <50:
            led.duty_cycle = int(i*2*65535/100)
        else:
            led.duty_cycle = 65535 - int((i-50)*2*65535/100)
        time.sleep(1)
15/14:
while True:
    for i in range(100):
        if i <50:
            led.duty_cycle = int(i*2*65535/100)
            print(int(i*2*65535/100))
        else:
            led.duty_cycle = 65535 - int((i-50)*2*65535/100)
            print(65535 - int((i-50)*2*65535/100))
        time.sleep(1)
15/15: led = pulseio.PWMOut(board.D22, frequency=5000, duty_cycle=50)
15/16:
while True:
    for i in range(100):
        if i <50:
            led.duty_cycle = int(i*2*65535/100)
            print(int(i*2*65535/100))
        else:
            led.duty_cycle = 65535 - int((i-50)*2*65535/100)
            print(65535 - int((i-50)*2*65535/100))
        time.sleep(1)
15/17: led = pulseio.PWMOut(board.D22, frequency=25000, duty_cycle=50)
15/18: led.frequency=25000
15/19:
while True:
    for i in range(100):
        if i <50:
            led.duty_cycle = int(i*2*65535/100)
            print(int(i*2*65535/100))
        else:
            led.duty_cycle = 65535 - int((i-50)*2*65535/100)
            print(65535 - int((i-50)*2*65535/100))
        time.sleep(1)
15/20:
while True:
    for i in range(100):
        if i <50:
            led.duty_cycle = int(i*2*65535/100)
            print(int(i*2*65535/100))
        else:
            led.duty_cycle = 65535 - int((i-50)*2*65535/100)
            print(65535 - int((i-50)*2*65535/100))
        time.sleep(1)
15/21:
while True:
    for i in range(100):
        if i <50:
            led.duty_cycle = int(i*2*65535/100)
            print(int(i*2*65535/100))
        else:
            led.duty_cycle = 65535 - int((i-50)*2*65535/100)
            print(65535 - int((i-50)*2*65535/100))
        time.sleep(1)
15/22:
while True:
    for i in range(100):
        if i <50:
            led.duty_cycle = int(i*2*65535/100)
            print(int(i*2*65535/100))
        else:
            led.duty_cycle = 65535 - int((i-50)*2*65535/100)
            print(65535 - int((i-50)*2*65535/100))
        time.sleep(1)
15/23:
while True:
    for i in range(100):
        if i <50:
            led.duty_cycle = int(i*2*65535/100)
            print(int(i*2*65535/100))
        else:
            led.duty_cycle = 65535 - int((i-50)*2*65535/100)
            print(65535 - int((i-50)*2*65535/100))
        time.sleep(0.1)
   1: %history -g -f ./python_hist.txt
